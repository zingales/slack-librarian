import json
import rds_util
import lambda_util
import logging


def formatQueryOutput(books):
    if books is None or len(books) == 0:
        return ["no books found"]

    by_series = {}
    for book in books:
        if book.series not in by_series:
            by_series[book.series] = list()
        by_series[book.series].append(book)

    output = list()

    for series, books_list in by_series.items():
        if series == "":
            formated_series = "Not Part of a series \n"
        else:
            formated_series = "Series {0}\n".format(series)

        for book in books_list:
            formated_series += "\t{0} - {1}".format(
                book.name, book.dropbox_link)
        output.append(formated_series)

    return output


def handle_bot_event(body):
    logging.info("==== Bot Event ======")
    data = json.loads(body)
    # Grab the Slack event data.
    slack_event = data['event']

    # We need to discriminate between events generated by
    # the users, which we want to process and handle,
    # and those generated by the bot.
    if "bot_id" in slack_event:
        pass
        # logging.warn("Ignore bot event")
    else:
        # Get the text of the message the user sent to the bot,
        # and reverse it.
        text = slack_event["text"]
        series = formatQueryOutput(rds_util.getRdsi().query_name(text))

        # Get the ID of the channel where the message was posted.
        channel_id = slack_event["channel"]

        for serie in series:
            lambda_util.send_slack_message(channel_id, serie)

    # Everything went fine.
    return {
        "statusCode": 200,
    }
